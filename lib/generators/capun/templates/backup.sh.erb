#!/bin/bash

has_error=0
error_text="";

cd /home/<%= fetch(:user) %>/apps/<%= fetch(:application) %>/shared
curdate=$(date +"%m-%d-%y")
mkdir -p "backuping/version-$curdate"

zip -u -0 -r -s 1000 "backuping/version-$curdate/assets.zip" <% (fetch(:backupFolders) || []).each do |folder|%> <%= folder + ' ' %> <% end %>

adapter=$(cat config/database.yml | grep adapter | sed s/adapter://g | xargs)
if [ "$adapter" = "sqlite3" ]; then
  DATA_BASE_TYPE="<%=fetch(:stage)%>.sqlite3"
  cp "<%=fetch(:stage)%>.sqlite3" "backuping/version-$curdate/<%=fetch(:stage)%>.sqlite3"
fi
if [ "$adapter" = "mysql2" ]; then
DATA_BASE_TYPE="<%=fetch(:stage)%>.sql"
username=$(cat config/database.yml | grep username | sed s/username://g | xargs)
password=$(cat config/database.yml | grep password | sed s/password://g | xargs)
database=$(cat config/database.yml | grep database | sed s/database://g | xargs)
{
mysqldump --user="$username" --password="$password" $database > "backuping/version-$curdate/<%=fetch(:stage)%>.sql"
} || {
  has_error=1
  error_text="Mysql dump error"
}
fi


if [ "$adapter" = "postgresql" ]; then
DATA_BASE_TYPE="<%=fetch(:stage)%>.sql"
username=$(cat config/database.yml | grep username | sed s/username://g | xargs)
password=$(cat config/database.yml | grep password | sed s/password://g | xargs)
database=$(cat config/database.yml | grep database | sed s/database://g | xargs)

if grep "localhost:5432:$database:$username:$password" ~/.pgpass; then 
   echo "pg config exists"     
else 
   echo "localhost:5432:$database:$username:$password" >> ~/.pgpass;  
   chmod 600 ~/.pgpass
fi

{
  pg_dump -h localhost -U $username -d $database -f backuping/version-$curdate/<%=fetch(:stage)%>.sql
} || {
  has_error=1
  error_text="PG dump error"
}
fi

COUNTER=5


until [  $COUNTER -lt 1 ]; do
    #{ #try
    python drivesink.py upload "backuping" <%= fetch(:backupDestinationFolder) || "backups/firstdedic-server/" + fetch(:application)  %> -c /home/kobe/.drivesink #>> log/backup.log 2>&1
    #} || { 
    #  has_error=1;
    #  error_text="Cannot upload files";
    #}
    if [ $? -eq 0 ]; then
      COUNTER=0
    else
      COUNTER=$[$COUNTER -1]
    fi
done

if ([ $? -eq 0 ] && [ "$has_error" == 0 ]); then
SIZE=$(du -sh backuping | awk '{print $1}')
curl -X POST -H 'Content-type: application/json' \
--data "{'attachments': [{'mrkdwn_in': ['text'],'text': '–£—Å–ø–µ—à–æ —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –¥–ª—è *<%= fetch(:application) %>*\n<% (fetch(:backupFolders) || []).each do |folder|%><%= "- " +folder + '\n' %><% end %>- $DATA_BASE_TYPE\n–†–∞–∑–º–µ—Ä *$SIZE*','color': '#3AA3E3', 'title': 'Amazon Backup System'}]<%=", \'channel\': \'#{fetch(:slack_channel)}\' " if !fetch(:slack_channel).nil? %>}" \
<%= fetch(:slack_hook) %>

#telegram notification
curl -i -X GET "https://api.telegram.org/bot<%= fetch(:backup_telegram_bot_hash) %>/sendMessage?chat_id=<%= fetch(:backup_telegram_chat_id) %>&text=‚úÖ –ë–µ–∫–∞–ø –¥–ª—è <%= fetch(:application) %>"

else
curl -X POST -H 'Content-type: application/json' \
--data "{'attachments': [{'mrkdwn_in': ['text'],'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è *<%= fetch(:application) %>','color': '#FF0000', 'title': 'Amazon Backup System'}]<%=", \'channel\': \'#{fetch(:slack_channel)}\' " if !fetch(:slack_channel).nil? %>}" \
<%= fetch(:slack_hook) %>

#telegram notification
curl -i -X GET "https://api.telegram.org/bot<%= fetch(:backup_telegram_bot_hash) %>/sendMessage?chat_id=<%= fetch(:backup_telegram_chat_id) %>&text=üö´  –ë–µ–∫–∞–ø –¥–ª—è <%= fetch(:application) %> \[Error: $error_text\]"

fi

sudo rm -rf backuping
